package automation.PestRoutes.Controller.Reporting.Office;

import automation.PestRoutes.Controller.*;
import automation.PestRoutes.Controller.Billings.AccountReceivable;
import automation.PestRoutes.Controller.Billings.Billing;
import automation.PestRoutes.Controller.CustomerCreation.CreateNewCustomer;
import automation.PestRoutes.Controller.Invoicing.InvoicingTab;
import automation.PestRoutes.PageObject.CreateCustomer.CreateCustomerDialog;
import automation.PestRoutes.PageObject.CustomerOverview.CustomerViewDialog_Admin;
import automation.PestRoutes.PageObject.CustomerOverview.CustomerViewDialog_Header;
import automation.PestRoutes.PageObject.CustomerOverview.CustomerViewDialog_OverviewTab;
import automation.PestRoutes.PageObject.CustomerOverview.CustomerviewDialog_AppointmentsTab;
import automation.PestRoutes.PageObject.CustomerOverview.Invoicing.CreditMemoTab;
import automation.PestRoutes.PageObject.CustomerOverview.Invoicing.InvoiceImplementation;
import automation.PestRoutes.PageObject.Header;
import automation.PestRoutes.PageObject.ReportingPage.OfficePage.BillingByServiceTypeTab;
import automation.PestRoutes.PageObject.ReportingPage.OfficePage.PaymentsByServiceTypeTab;
import automation.PestRoutes.Utilities.Data.*;
import automation.PestRoutes.Utilities.Legacy;
import automation.PestRoutes.Utilities.Report.*;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Then;
import org.openqa.selenium.Keys;
import org.openqa.selenium.StaleElementReferenceException;
import org.testng.annotations.Test;

import java.io.IOException;
import java.util.Locale;

import static automation.PestRoutes.Utilities.Report.AssertException.result;

public class PaymentsByServiceType extends AppData {

    PaymentsByServiceTypeTab paymentsByServiceTypeTab = new PaymentsByServiceTypeTab();
    BillingByServiceTypeTab billingByServiceTypeTab = new BillingByServiceTypeTab();
    InvoiceImplementation invImplementation;
    CustomerViewDialog_Header customerCardHeader;
    Header header;
    CreateNewCustomer createNewCustomer;
    CreditMemoTab creditMemoTab;
    CustomerViewDialog_OverviewTab customerViewDialog_overviewTab;
    CreateCustomerDialog createCustomerDialog;
    CustomerviewDialog_AppointmentsTab customerviewDialog_appointmentsTab;

    private String subTotalValue = "";
    private String taxValue = "";
    private String totalCollected = "";
    private String dateOfInvoice = "";
    private String customerID_PST = "";
    private String customerName_PST = "";

    //Author: Aditya
    @Test
    @Then("I validate if all fields are displaying and are enabled in Payments by service type")
    public void validateAllFieldsEnabled() {
        billingByServiceTypeTab.clickAdvancedFilters();
        String[] fields = {billingByServiceTypeTab.dateParams, billingByServiceTypeTab.groupBy, billingByServiceTypeTab.subGroupOne,
                billingByServiceTypeTab.subGroupTwo, billingByServiceTypeTab.asOfDate, paymentsByServiceTypeTab.Coupons, billingByServiceTypeTab.writeOffs,
                billingByServiceTypeTab.aPayType_bbst, billingByServiceTypeTab.aPayStatus_bbst, billingByServiceTypeTab.propType_bbst,
                billingByServiceTypeTab.balance_bbst, billingByServiceTypeTab.balanceAge_bbst, billingByServiceTypeTab.soldDateRange,
                billingByServiceTypeTab.search_bbst,
                billingByServiceTypeTab.filterTypes_BST("invoice_bbst"),
                billingByServiceTypeTab.filterTypes_BST("serviceType_bbst"),
                billingByServiceTypeTab.filterTypes_BST("customerSource_bbst"),
                billingByServiceTypeTab.filterTypes_BST("inclCollections"),
                billingByServiceTypeTab.filterTypes_BST("subSource_bbst"),
                billingByServiceTypeTab.filterTypes_BST("regions_bbst"),
                billingByServiceTypeTab.filterTypes_BST("divisions_bbst"),
                billingByServiceTypeTab.filterTypes_BST("offices_bbst"),
                billingByServiceTypeTab.filterTypes_BST("includeFlags_bbst"),
                billingByServiceTypeTab.filterTypes_BST("excludeFlags_bbst"),
                billingByServiceTypeTab.filterTypes_BST("scheduledBy_bbst"),
                billingByServiceTypeTab.filterTypes_BST("soldByTeam_bbst"),
                billingByServiceTypeTab.filterTypes_BST("soldbySalesRep_bbst")};

        billingByServiceTypeTab.click(billingByServiceTypeTab.refresh_bbst);

        AssertException.validateFieldEnabled(fields);
    }

    //Author: Aditya
    @And("I validate the fields in multi group generated by payments by service type report")
    public void validateFields_PaymentServiceReport_MultiGroup() {
        String[] fields;

        fields = new String[]{paymentsByServiceTypeTab.filterTypes_PST("description_pstReport_MultiGroup"),
                paymentsByServiceTypeTab.filterTypes_PST("appliedPaymentsBeforeTax_pstReport_MultiGroup"),
                paymentsByServiceTypeTab.filterTypes_PST("tax_pstReport_MultiGroup"),
                paymentsByServiceTypeTab.filterTypes_PST("coupons_pstReport_MultiGroup"),
                paymentsByServiceTypeTab.filterTypes_PST("cash_pstReport_MultiGroup"),
                paymentsByServiceTypeTab.filterTypes_PST("check_pstReport_MultiGroup"),
                paymentsByServiceTypeTab.filterTypes_PST("cardType_pstReport_MultiGroup"),
                paymentsByServiceTypeTab.filterTypes_PST("amexCard_pstReport_MultiGroup"),
                paymentsByServiceTypeTab.filterTypes_PST("ACH_pstReport_MultiGroup"),
                paymentsByServiceTypeTab.filterTypes_PST("totalCollected_pstReport_MultiGroup")};
        AssertException.validateFieldEnabled(fields);
    }

    //Author: Aditya
    @And("I validate the fields generated by payments by service type report")
    public void validateFields_PaymentServiceReport() {
        String[] fields;

        fields = new String[]{paymentsByServiceTypeTab.filterTypes_PST("description_pstReport"),
                paymentsByServiceTypeTab.filterTypes_PST("appliedPaymentsBeforeTax_pstReport"),
                paymentsByServiceTypeTab.filterTypes_PST("tax_pstReport"),
                paymentsByServiceTypeTab.filterTypes_PST("coupons_pstReport"),
                paymentsByServiceTypeTab.filterTypes_PST("cash_pstReport"),
                paymentsByServiceTypeTab.filterTypes_PST("check_pstReport"),
                paymentsByServiceTypeTab.filterTypes_PST("cardType_pstReport"),
                paymentsByServiceTypeTab.filterTypes_PST("amexCard_pstReport"),
                paymentsByServiceTypeTab.filterTypes_PST("ACH_pstReport"),
                paymentsByServiceTypeTab.filterTypes_PST("totalCollected_pstReport")};
        AssertException.validateFieldEnabled(fields);
    }

    //Author : Aditya
    @And("I get customer name and customer ID details for Payments by service type report")
    public void updateCustomerIDAndCustomerNameDetails() throws InterruptedException {
        createNewCustomer = new CreateNewCustomer();
        customerName_PST = createNewCustomer.getCustomerFullName();
        customerViewDialog_overviewTab = new CustomerViewDialog_OverviewTab();
        customerID_PST = customerViewDialog_overviewTab.getCustomerIDFromHeader();
    }

    //Author: Aditya
    @And("I validate if the payments by service type report is linked to the customer card")
    public void validateLink_customerCard_PST() throws Exception {
        billingByServiceTypeTab.clickDescription_reportDetails(customerName_PST);
        billingByServiceTypeTab.customerDetails(customerName_PST);
    }

    //Author: Aditya
    @And("I validate data generated from payments by service type report")
    public void validateDataInPaymentsReport() throws InterruptedException {
        invImplementation = new InvoiceImplementation();
        customerCardHeader = new CustomerViewDialog_Header();
        creditMemoTab = new CreditMemoTab();
        header = new Header();
        createNewCustomer = new CreateNewCustomer();
        createCustomerDialog = new CreateCustomerDialog();
        customerViewDialog_overviewTab = new CustomerViewDialog_OverviewTab();
        header.searchCustomerWithName(customerName_PST);
        customerCardHeader.navigateTo(customerCardHeader.infoTabInDialog);
        double taxPercent = Double.parseDouble(billingByServiceTypeTab.getAttributeValue(createCustomerDialog.mainTaxPercentage, "value").replaceAll("%", "")) / 100;
        customerCardHeader.navigateTo(customerCardHeader.invoicesTabInDialog);
        if (CucumberBaseClass.scenarioName().equals("Credit memo validation in PST")) {
            billingByServiceTypeTab.click(creditMemoTab.getTicketID());
            creditMemoTab.clickAppliedCharge_invoiceApplications();
        } else {
            invImplementation.clickInitialInvoice();
        }
        subTotalValue = invImplementation.getSubTotalValue();
        taxValue = invImplementation.getTaxValue();
        totalCollected = billingByServiceTypeTab.get(invImplementation.paymentsInPayments);
        if (CucumberBaseClass.scenarioName().equals("Credit memo validation in PST")) {
            totalCollected = "$" + String.format("%.2f", Double.parseDouble(billingByServiceTypeTab.get(invImplementation.paymentsInPayments).substring(1)) / 10);
        }
        if (CucumberBaseClass.scenarioName().equals("Balance Age validation PST with StandAlone Invoices")) {
            subTotalValue = billingByServiceTypeTab.get(invImplementation.paymentsInPayments).substring(1);
            taxPercent = 1 + taxPercent;
            subTotalValue = "$" + String.format("%.2f", Double.parseDouble(subTotalValue) / (taxPercent));
            taxValue = "$" + String.format("%.2f", (Double.parseDouble(totalCollected.substring(1)) - Double.parseDouble(subTotalValue.substring(1))));
        }
        if (CucumberBaseClass.scenarioName().equals("Credit memo validation in PST")) {
            subTotalValue = billingByServiceTypeTab.get(invImplementation.paymentsInPayments).substring(1);
            taxPercent = (1 + taxPercent) * 10;
            subTotalValue = "$" + String.format("%.2f", Double.parseDouble(subTotalValue) / (taxPercent));
            taxValue = "$" + String.format("%.2f", (Double.parseDouble(totalCollected.substring(1)) - Double.parseDouble(subTotalValue.substring(1))));
        }
        result(totalCollected, billingByServiceTypeTab.get(paymentsByServiceTypeTab.totalCollected_Report), "Total Collected in the report", "PST Report Validation");
        result(billingByServiceTypeTab.get(paymentsByServiceTypeTab.totalCollected_Report), billingByServiceTypeTab.get(paymentsByServiceTypeTab.totalCollected_VisaMasterEtc_Report), "Total Collected via VISA/Master/Etc in the report", "PST Report Validation");
        result("$0.00", billingByServiceTypeTab.get(paymentsByServiceTypeTab.totalCollected_ACH_Report), "Total Collected via ACH", "PST Report Validation");
        result(billingByServiceTypeTab.get(paymentsByServiceTypeTab.appliedPaymentBeforeTax_Report), subTotalValue, "Sub Total Value Validation in report",
                "PST Report Validation");
        result(billingByServiceTypeTab.get(paymentsByServiceTypeTab.tax_Report), taxValue, "Tax Value Validation in report",
                "PST Report Validation");
    }

    //Author: Aditya
    @And("I validate data generated from payments by service type report in multi groups")
    public void validateDataInPaymentsReport_multiGroups() throws InterruptedException {
        invImplementation = new InvoiceImplementation();
        customerCardHeader = new CustomerViewDialog_Header();
        creditMemoTab = new CreditMemoTab();
        header = new Header();
        createNewCustomer = new CreateNewCustomer();
        createCustomerDialog = new CreateCustomerDialog();
        customerViewDialog_overviewTab = new CustomerViewDialog_OverviewTab();
        header.searchCustomerWithName(customerName_PST);
        customerCardHeader.navigateTo(customerCardHeader.infoTabInDialog);
        customerCardHeader.navigateTo(customerCardHeader.invoicesTabInDialog);
        invImplementation.clickInitialInvoice();
        subTotalValue = invImplementation.getSubTotalValue();
        taxValue = invImplementation.getTaxValue();
        totalCollected = billingByServiceTypeTab.get(invImplementation.paymentsInPayments);
        result(totalCollected, paymentsByServiceTypeTab.getPaymentServices_MultiGroupReport(customerID_PST), "Total Collected in the report", "PST Report Validation");
//        result(billingByServiceTypeTab.get(paymentsByServiceTypeTab.totalCollected_Report), billingByServiceTypeTab.get(paymentsByServiceTypeTab.totalCollected_VisaMasterEtc_Report), "Total Collected via VISA/Master/Etc in the report", "PST Report Validation");
        result("$0.00", billingByServiceTypeTab.get(paymentsByServiceTypeTab.totalCollected_ACH_Report), "Total Collected via ACH", "PST Report Validation");
        result(paymentsByServiceTypeTab.getAppliedPaymentsBeforeTax_MultiGroupReport(customerID_PST), subTotalValue, "Sub Total Value Validation in report",
                "PST Report Validation");
        result(paymentsByServiceTypeTab.getTaxRate_MultiGroupReport(customerID_PST), taxValue, "Tax Value Validation in report",
                "PST Report Validation");
    }

    //Author: Aditya
    @And("I validate data generated from ACH payments by service type report")
    public void validateDataInPaymentsReport_ACH() throws InterruptedException {
        invImplementation = new InvoiceImplementation();
        customerCardHeader = new CustomerViewDialog_Header();
        creditMemoTab = new CreditMemoTab();
        header = new Header();
        createNewCustomer = new CreateNewCustomer();
        customerViewDialog_overviewTab = new CustomerViewDialog_OverviewTab();
        header.searchCustomerWithName(customerName_PST);
        customerCardHeader.navigateTo(customerCardHeader.invoicesTabInDialog);
        invImplementation.clickInitialInvoice();
        subTotalValue = invImplementation.getSubTotalValue();
        taxValue = invImplementation.getTaxValue();
        totalCollected = billingByServiceTypeTab.get(invImplementation.paymentsInPayments);
        result(totalCollected, billingByServiceTypeTab.get(paymentsByServiceTypeTab.totalCollected_Report), "Total Collected in the report", "PST Report Validation");
        result("$0.00", billingByServiceTypeTab.get(paymentsByServiceTypeTab.totalCollected_VisaMasterEtc_Report), "Total Collected via VISA/Master/Etc in the report", "PST Report Validation");
        result(billingByServiceTypeTab.get(paymentsByServiceTypeTab.totalCollected_Report), billingByServiceTypeTab.get(paymentsByServiceTypeTab.totalCollected_ACH_Report), "Total Collected via ACH in the report", "PST Report Validation");
        result(billingByServiceTypeTab.get(paymentsByServiceTypeTab.appliedPaymentBeforeTax_Report), subTotalValue, "Sub Total Value Validation in report",
                "PST Report Validation");
        result(billingByServiceTypeTab.get(paymentsByServiceTypeTab.tax_Report), taxValue, "Tax Value Validation in report",
                "PST Report Validation");
    }

    //Author: Aditya
    @And("I validate the fields are displayed in individual line items in Payment by Service Type")
    public void validateFields_PSTLineItem() throws InterruptedException {
        createNewCustomer = new CreateNewCustomer();
        header = new Header();

        try {
            String[] fields = {billingByServiceTypeTab.search_lineItem,
                    billingByServiceTypeTab.pageNumber_lineItem,
                    billingByServiceTypeTab.filterTypes_BST("customerID_lineItem"),
                    billingByServiceTypeTab.filterTypes_BST("customerName_lineItem"),
                    billingByServiceTypeTab.filterTypes_BST("billedServices_lineItem"),
                    billingByServiceTypeTab.filterTypes_BST("tax_lineItem"),
                    paymentsByServiceTypeTab.filterTypes_PST("paymentDate_lineItem"),
                    paymentsByServiceTypeTab.filterTypes_PST("paymentMethod_lineItem"),
                    paymentsByServiceTypeTab.filterTypes_PST("serviceType_lineItem"),
                    paymentsByServiceTypeTab.filterTypes_PST("invoiceID_lineItem"),
                    paymentsByServiceTypeTab.filterTypes_PST("totalPayment_lineItem"),
                    billingByServiceTypeTab.filterTypes_BST("first_page"),
                    billingByServiceTypeTab.filterTypes_BST("previous_page"),
                    billingByServiceTypeTab.filterTypes_BST("next_page"),
                    billingByServiceTypeTab.filterTypes_BST("last_page"),
                    billingByServiceTypeTab.exportDetailsToCSV_button};
            AssertException.validateFieldEnabled(fields);
        } catch (StaleElementReferenceException e) {
            System.out.println("Fields not visible");
        } finally {
//            if (!CucumberBaseClass.scenarioName().equals("Multi Group By filter validation in PST")) {
//                header.clickAccessHistory();
//            }
            createNewCustomer.removeCustomer();
        }
    }

    CustomerViewDialog_Admin customerViewDialog_admin;
    AccountReceivable accountReceivable;
    Billing billing;
    InvoicingTab invoicingTab;
    OfficeObjects officeObjects;

    //Author: Aditya
    @Then("I validate customer with balance age in Payments by Service Type")
    public void validateBalanceAge() throws Exception {
        createNewCustomer = new CreateNewCustomer();
        customerCardHeader = new CustomerViewDialog_Header();
        customerViewDialog_admin = new CustomerViewDialog_Admin();
        customerViewDialog_overviewTab = new CustomerViewDialog_OverviewTab();
        accountReceivable = new AccountReceivable();
        String[] balanceAge = {"7+ Days Old", "30+ Days Old (Past Due)", "90+ Days Old (Way, Way Past Due)"};
        int[] invoiceDaysPastDue = {7, 30, 90};
        for (int i = 0; i < balanceAge.length; i++) {
            String fname = GetData.generateRandomString(7).toLowerCase(Locale.ROOT);
            String lname = GetData.generateRandomString(6).toLowerCase(Locale.ROOT);
            customerName_PST = fname + " " + lname;
            Thread.sleep(100);
            createNewCustomer.createACustomer(fname, lname);
            createNewCustomer.validateTaxRate();
            int currentMonth = GetDate.getMonth(GetDate.currentDate("MM/dd/yyyy"));
            int currentYear = GetDate.getYear(GetDate.currentDate("MM/dd/yyyy"));
            dateOfInvoice = GetDate.minusGenericDayToDate(GetDate.currentDate("MM/dd/yyyy"), invoiceDaysPastDue[i]);
            int monthOfInv = GetDate.getMonth(dateOfInvoice);
            int yearOfInv = GetDate.getYear(dateOfInvoice);
            String amount = "400";
            accountReceivable.createStandAloneServiceInvoice(amount, dateOfInvoice, getData("serviceDescription", generalData));
            customerID_PST = customerViewDialog_overviewTab.getCustomerIDFromHeader();
            customerCardHeader.navigateTo(customerCardHeader.adminTabInDialog);
            customerViewDialog_admin.changeAccountStatus_Active();
            if (CucumberBaseClass.scenarioName().equals("Balance Age validation PST with StandAlone Invoices")) {
                billing = new Billing();
                invoicingTab = new InvoicingTab();
                billing.addPaymentCC("4111111111111111", "5412750109056250");
                invoicingTab.makeCardOnFile_PartialCCPayment();
            }
            createNewCustomer.closeCustomerCard();
            officeObjects = new OfficeObjects();
            officeObjects.navigateToReportType("Payments by Service Type");
            billingByServiceTypeTab.setGroupFilter(billingByServiceTypeTab.groupBy, "Customer Name");
            billingByServiceTypeTab.clickAdvancedFilters();
            billingByServiceTypeTab.setType("invoice_bbst", "Stand-Alone Invoices");
            String setAmount = Integer.toString(Integer.parseInt(amount) / 10);
            billingByServiceTypeTab.setBalance_bbst(setAmount);
            billingByServiceTypeTab.set(billingByServiceTypeTab.balanceAge_bbst, balanceAge[i]);
            int monthPastDue = currentMonth - monthOfInv;
            int yearsPastDue = currentYear - yearOfInv;
            if (!CucumberBaseClass.scenarioName().equals("Balance Age validation PST with StandAlone Invoices")) {
                if (monthPastDue == 0 && yearsPastDue == 0) {
                    billingByServiceTypeTab.setDateRange(billingByServiceTypeTab.dateParams, "Last Week");
                } else if (monthPastDue == 1 && yearsPastDue == 0) {
                    billingByServiceTypeTab.setDateRange(billingByServiceTypeTab.dateParams, "Last Month");
                } else if (yearsPastDue > 0) {
                    billingByServiceTypeTab.setDateRange(billingByServiceTypeTab.dateParams, "Last Year");
                } else if (monthPastDue > 1 && yearsPastDue == 0) {
                    billingByServiceTypeTab.setDateRange(billingByServiceTypeTab.dateParams, "This Year");
                }
            }
            billingByServiceTypeTab.click(billingByServiceTypeTab.refresh_bbst);
            billingByServiceTypeTab.searchNewCustomer(billingByServiceTypeTab.search_bbst, billingByServiceTypeTab.getCustomerName_CustomerCard_InfoTab());

            validateFields_PaymentServiceReport();
            validateLink_customerCard_PST();
            validateDataInPaymentsReport();
            validateLineItemValues_PaymentReport();
            validateFields_PSTLineItem();

        }
    }

    //Author: Aditya
    @And("I validate line item data in Payments by service type report")
    public void validateLineItemValues_PaymentReport() throws IOException {
        result(totalCollected, billingByServiceTypeTab.get(paymentsByServiceTypeTab.totalCollected_Customer), "Total Collected in the detail report", "PST Report Validation");
        result(billingByServiceTypeTab.get(paymentsByServiceTypeTab.tax_Customer), taxValue, "Tax Value Validation in detailed report",
                "PST Report Validation");
        if (CucumberBaseClass.scenarioName().equals("Multi Group By filter validation in PST")) {
            result(paymentsByServiceTypeTab.getAppliedPaymentsBeforeTax_MultiGroupReport(customerID_PST), billingByServiceTypeTab.get(paymentsByServiceTypeTab.appliedPaymentBeforeTax_Customer), "Applied Payment Validation in detail report",
                    "PST Report Validation");
        } else {
            result(billingByServiceTypeTab.get(paymentsByServiceTypeTab.appliedPaymentBeforeTax_Report), billingByServiceTypeTab.get(paymentsByServiceTypeTab.appliedPaymentBeforeTax_Customer), "Applied Payment Validation in detail report",
                    "PST Report Validation");
        }
        dateOfInvoice = (billingByServiceTypeTab.get(paymentsByServiceTypeTab.invoiceDate_lineItem)).substring(0, 8);
        result(GetDate.currentDate("MM/dd/YY"), dateOfInvoice, "Invoice Date Validation", "PST Report Validation");
        result("Credit Card", billingByServiceTypeTab.get(paymentsByServiceTypeTab.paymentMethod), "Payment Method validation in detail report", "PST Report Validation");
//        if (CucumberBaseClass.scenarioName().equals("Credit memo validation in PST")) {
//            result(billingByServiceTypeTab.getAttributeValue
//                    (invImplementation.inactiveInvoiceOnTheLeft, "ticketid"),
//                    billingByServiceTypeTab.get(paymentsByServiceTypeTab.invoiceID_lineItem),
//                    "Invoice ID validation in detail report", "PST Report Validation");
//        } else {
//            result(billingByServiceTypeTab.getAttributeValue
//                    (invImplementation.activeInvoiceOnTheLeft, "ticketid"),
//                    billingByServiceTypeTab.get(paymentsByServiceTypeTab.invoiceID_lineItem),
//                    "Invoice ID validation in detail report", "PST Report Validation");
//        }
        result(getData("serviceDescription", generalData), billingByServiceTypeTab.get(billingByServiceTypeTab.serviceType_lineItem), "Service Type in detail report validation", "PST Report Validation");
        result(customerID_PST, billingByServiceTypeTab.get(billingByServiceTypeTab.customerID_lineItem), "Customer ID Validation", "PST Report Validation");
        result(customerName_PST, billingByServiceTypeTab.get(billingByServiceTypeTab.customerName_lineItem), "Customer Name Validation", "PST" +
                "PST Report Validation");
    }

    //Author: Aditya
    @And("I validate line item data for ACH payments in Payments by service type report")
    public void validateLineItemValuesForACHPayment_PaymentReport() throws IOException {
        result(totalCollected, billingByServiceTypeTab.get(paymentsByServiceTypeTab.totalCollected_Customer), "Total Collected in the detail report", "PST Report Validation");
        result(billingByServiceTypeTab.get(paymentsByServiceTypeTab.tax_Customer), taxValue, "Tax Value Validation in detailed report",
                "PST Report Validation");
        result(billingByServiceTypeTab.get(paymentsByServiceTypeTab.appliedPaymentBeforeTax_Report), billingByServiceTypeTab.get(paymentsByServiceTypeTab.appliedPaymentBeforeTax_Customer), "Applied Payment Validation in detail report",
                "PST Report Validation");
        dateOfInvoice = (billingByServiceTypeTab.get(paymentsByServiceTypeTab.invoiceDate_lineItem)).substring(0, 8);
        result(GetDate.currentDate("MM/dd/YY"), dateOfInvoice, "Invoice Date Validation", "PST Report Validation");
        result("ACH", billingByServiceTypeTab.get(paymentsByServiceTypeTab.paymentMethod), "Payment Method validation in detail report", "PST Report Validation");
        result(billingByServiceTypeTab.getAttributeValue(invImplementation.activeInvoiceOnTheLeft, "ticketid"), billingByServiceTypeTab.get(paymentsByServiceTypeTab.invoiceID_lineItem), "Invoice ID validation in detail report", "PST Report Validation");
        result(getData("serviceDescription", generalData), billingByServiceTypeTab.get(billingByServiceTypeTab.serviceType_lineItem), "Service Type in detail report validation", "PST Report Validation");
        result(customerID_PST, billingByServiceTypeTab.get(billingByServiceTypeTab.customerID_lineItem), "Customer ID Validation", "PST Report Validation");
        result(customerName_PST, billingByServiceTypeTab.get(billingByServiceTypeTab.customerName_lineItem), "Customer Name Validation", "PST" +
                "PST Report Validation");
    }

    //Author: Aditya
    @And("I add the technician on the appointment")
    public void addTechnicianToAppointment() throws IOException {
        customerviewDialog_appointmentsTab = new CustomerviewDialog_AppointmentsTab();
        String userFirstName = getData("userFirstName", generalData);
        String userLastName = getData("userLastName", generalData);
        customerviewDialog_appointmentsTab.changeAppointmentTech(userFirstName + " "+ userLastName);
        customerviewDialog_appointmentsTab.clickOKButton();
    }

    //Author: Aditya
    @Then("I search customer in payment frequency line item")
    public void searchCustomerPaymentFrequencyLineItem() throws InterruptedException {
        billingByServiceTypeTab.click("//tr//td[text()='" + customerID_PST + "']");
        billingByServiceTypeTab.searchNewCustomer(billingByServiceTypeTab.search_lineItem, customerID_PST);
        Legacy.locate(billingByServiceTypeTab.search_lineItem).sendKeys(Keys.ENTER);
        Thread.sleep(500);
    }

    //Author: Aditya
    @And("I search and click on the technician assigned to the appointment in PST")
    public void searchTechnician() throws IOException {
        createCustomerDialog = new CreateCustomerDialog();
        billingByServiceTypeTab.click(billingByServiceTypeTab.refresh_bbst);
        String userFirstName = getData("userFirstName", generalData);
        String userLastName = getData("userLastName", generalData);
        billingByServiceTypeTab.searchNewCustomer(billingByServiceTypeTab.search_bbst, userFirstName + " "+ userLastName);
        billingByServiceTypeTab.clickDescription_reportDetails(userLastName + ", " + userFirstName);
    }
}
